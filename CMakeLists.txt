cmake_minimum_required(VERSION 3.20)

file(READ "${CMAKE_SOURCE_DIR}/version.txt" bread_VERSION)

project(bread_engine VERSION ${bread_VERSION} LANGUAGES CXX)

set(bread_DEFAULT_NAME "bread_engine_${CMAKE_PROJECT_VERSION}")

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)

set(bread_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src)
set(bread_UTILS ${CMAKE_CURRENT_SOURCE_DIR}/utils)
set(bread_NEURAL_NETWORKS ${CMAKE_CURRENT_SOURCE_DIR}/neural_networks)

set(bread_NNUE_MODEL_PATH "${bread_NEURAL_NETWORKS}/model_NNUE_768_2x1024_1")
set(bread_DEBUG_UCI_COMMANDS_PATH "${bread_UTILS}/commands.txt")

set(bread_INCLUDE_DIRS
    ${bread_SRC}
    ${bread_SRC}/nnue
    ${bread_SRC}/extern
    ${bread_SRC}/extern/Fathom/src
)

set(bread_SOURCE
    ${bread_SRC}/nonsense.cpp
    ${bread_SRC}/see.cpp
    ${bread_SRC}/history.cpp
    ${bread_SRC}/misc.cpp
    ${bread_SRC}/sorted_move_gen.cpp
    ${bread_SRC}/nnue/nnue.cpp
    ${bread_SRC}/nnue/nnue_board.cpp
    ${bread_SRC}/nnue/nnue_misc.cpp
    ${bread_SRC}/transposition_table.cpp
    ${bread_SRC}/core.cpp
    ${bread_SRC}/benchmark.cpp
    ${bread_SRC}/extern/Fathom/src/tbprobe.cpp
)

# if(CMAKE_BUILD_TYPE STREQUAL "Debug" AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
#     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer -g -O1")
#     set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=undefined")
#     add_compile_definitions(_ITERATOR_DEBUG_LEVEL=0)
#     set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded")
# endif()

# disable warnings generated by fathom
if ((CMAKE_CXX_COMPILER_ID STREQUAL "Clang") OR (CMAKE_CXX_COMPILER_ID STREQUAL "GNU"))
    set_source_files_properties(
        ${bread_SRC}/extern/Fathom/src/tbprobe.cpp
        PROPERTIES
        COMPILE_FLAGS "-w"
    )
endif()

function(bread_configure bread_TARGET)
    cmake_parse_arguments(bread "" "" "SOURCES" ${ARGN})

    add_executable(${bread_TARGET} ${bread_SOURCES})

    if(UNIX)
        target_link_libraries(${bread_TARGET} PRIVATE atomic)
    endif()

    target_include_directories(${bread_TARGET} PRIVATE ${bread_INCLUDE_DIRS})
    
    target_compile_definitions(${bread_TARGET} PRIVATE bread_VERSION="${CMAKE_PROJECT_VERSION}")

    target_compile_definitions(${bread_TARGET} PRIVATE bread_NNUE_MODEL_PATH="${bread_NNUE_MODEL_PATH}")

    target_compile_definitions(${bread_TARGET} PRIVATE bread_DEBUG_UCI_COMMANDS_PATH="${bread_DEBUG_UCI_COMMANDS_PATH}")

    if (TARGET bread_engine)
        set_target_properties(bread_engine PROPERTIES OUTPUT_NAME "${bread_DEFAULT_NAME}")
    endif()

    if ((CMAKE_CXX_COMPILER_ID STREQUAL "Clang") OR (CMAKE_CXX_COMPILER_ID STREQUAL "GNU"))
        target_compile_options(${bread_TARGET} PRIVATE -march=native)
    endif()
endfunction(bread_configure)

bread_configure(bread_engine SOURCES
    ${bread_SOURCE}
    ${bread_SRC}/uci.cpp
    ${bread_SRC}/run_uci.cpp
)

bread_configure(uci_search SOURCES
    ${bread_SOURCE}
    ${bread_SRC}/uci.cpp
    ${bread_UTILS}/run_uci_search.cpp
)

bread_configure(search_position SOURCES
    ${bread_SOURCE}
    ${bread_SRC}/uci.cpp
    ${bread_UTILS}/run_search.cpp
)