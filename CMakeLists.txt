cmake_minimum_required(VERSION 3.20)
project(bread_engine VERSION 0.0.5)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)

set(bread_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src)
set(bread_UTILS ${CMAKE_CURRENT_SOURCE_DIR}/utils)
set(bread_DEPENDENCIES ${CMAKE_CURRENT_SOURCE_DIR}/dependencies)
set(bread_NEURAL_NETWORKS ${CMAKE_CURRENT_SOURCE_DIR}/neural_networks)

set(bread_NNUE_MODEL_PATH
    "${bread_NEURAL_NETWORKS}/model_NNUE_2-40960_2x256_32_32_1_quant_layers"
)

set(bread_NN_HEADER_PATH
    "${bread_DEPENDENCIES}/neural_network.hpp"
)

set(bread_INCLUDE_DIRS
    ${bread_DEPENDENCIES}
    ${bread_DEPENDENCIES}/extern
    ${bread_DEPENDENCIES}/unit_tests
    ${bread_DEPENDENCIES}/extern/Fathom/src
)


set(bread_SOURCE
    ${bread_SRC}/search_board.cpp
    ${bread_SRC}/nnue/nnue.cpp
    ${bread_SRC}/nnue/nnue_board.cpp
    ${bread_SRC}/transposition_table.cpp
    ${bread_SRC}/bread_engine_core.cpp
    ${bread_DEPENDENCIES}/extern/Fathom/src/tbprobe.cpp
)

# disable warnings generated by Fathom on GCC and Clang
if ((CMAKE_CXX_COMPILER_ID STREQUAL "Clang") OR (CMAKE_CXX_COMPILER_ID STREQUAL "GNU"))
    set_source_files_properties(
        ${bread_DEPENDENCIES}/extern/Fathom/src/tbprobe.cpp
        PROPERTIES
        COMPILE_FLAGS "-w"
    )
endif()


function(bread_configure bread_TARGET)
    cmake_parse_arguments(bread "" "" "SOURCES" ${ARGN})

    add_executable(${bread_TARGET} ${bread_SOURCES})

    target_include_directories(${bread_TARGET} PRIVATE ${bread_INCLUDE_DIRS})

    target_compile_definitions(${bread_TARGET} PRIVATE bread_VERSION="${CMAKE_PROJECT_VERSION}")

    target_compile_definitions(${bread_TARGET} PRIVATE bread_USE_TB=$<BOOL:${bread_USE_TB}>)
    
    if (NOT TARGET generate_neural_net_header)
        target_compile_definitions(${bread_TARGET} PRIVATE bread_EMBED_NN=1)
    endif()

    target_compile_definitions(${bread_TARGET} PRIVATE bread_TB_PATH="${bread_TB_PATH}")

    target_compile_definitions(${bread_TARGET} PRIVATE bread_NN_HEADER_PATH="${bread_NN_HEADER_PATH}")

    target_compile_definitions(${bread_TARGET} PRIVATE bread_NNUE_MODEL_PATH="${bread_NNUE_MODEL_PATH}")

    if ((CMAKE_CXX_COMPILER_ID STREQUAL "Clang") OR (CMAKE_CXX_COMPILER_ID STREQUAL "GNU"))
        target_compile_options(${bread_TARGET} PRIVATE -march=native)
    endif()
endfunction(bread_configure)

bread_configure(release SOURCES
    ${bread_SOURCE}
    ${bread_SRC}/uci.cpp
    ${bread_SRC}/run_uci.cpp
)

bread_configure(benchmark_engine SOURCES
    ${bread_SOURCE}
    ${bread_UTILS}/benchmark_engine.cpp
)

bread_configure(tests SOURCES
    ${bread_SOURCE}
    ${bread_UTILS}/unit_tests.cpp
)

bread_configure(parameter_tuning SOURCES
    ${bread_SOURCE}
    ${bread_UTILS}/parameter_optimisation.cpp
)

bread_configure(generate_neural_net_header SOURCES
    ${bread_SOURCE}
    ${bread_UTILS}/generate_nn_header.cpp
)

bread_configure(search_position SOURCES
    ${bread_SOURCE}
    ${bread_UTILS}/run_search.cpp
)