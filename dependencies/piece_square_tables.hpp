#pragma once

#include "chess.hpp"
#include <array>

constexpr std::array<float, 64> pawn_map_b = {
            25.2,  25.2,  25.2,  25.2,  25.2,  25.2,  25.2,  25.2, 
            19.6,  19.6,  19.6,  19.6,  19.6,  19.6,  19.6,  19.6, 
            5.6,   5.6,   8.4,  14.0,  14.0,   8.4,   5.6,   5.6, 
            2.8,   2.8,   5.6,  11.2,  11.2,   5.6,   2.8,   2.8, 
            0.0,   0.0,   0.0,   8.4,   8.4,   0.0,   0.0,   0.0, 
            2.8,  -2.8,  -5.6,   0.0,   0.0,  -5.6,  -2.8,   2.8, 
            0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0, 
            0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0};

constexpr std::array<float, 64> pawn_map_w = {
            0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0, 
            0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.0, 
            2.8,  -2.8,  -5.6,   0.0,   0.0,  -5.6,  -2.8,   2.8, 
            0.0,   0.0,   0.0,   8.4,   8.4,   0.0,   0.0,   0.0, 
            2.8,   2.8,   5.6,  11.2,  11.2,   5.6,   2.8,   2.8, 
            5.6,   5.6,   8.4,  14.0,  14.0,   8.4,   5.6,   5.6, 
           19.6,  19.6,  19.6,  19.6,  19.6,  19.6,  19.6,  19.6, 
           25.2,  25.2,  25.2,  25.2,  25.2,  25.2,  25.2,  25.2};

constexpr std::array<float, 64> knight_map_b = {
            -1.9,   0.0,   1.9,   1.9,   1.9,   1.9,   0.0,  -1.9, 
            0.0,   3.8,   7.6,   7.6,   7.6,   7.6,   3.8,   0.0, 
            1.9,   7.6,  11.4,  13.3,  13.3,  11.4,   7.6,   1.9, 
            1.9,   9.5,  13.3,  15.2,  15.2,  13.3,   9.5,   1.9, 
            1.9,   7.6,  13.3,  15.2,  15.2,  13.3,   7.6,   1.9, 
            1.9,   9.5,  11.4,  13.3,  13.3,  11.4,   9.5,   1.9, 
            0.0,   3.8,   7.6,   9.5,   9.5,   7.6,   3.8,   0.0, 
            -1.9,   0.0,   1.9,   1.9,   1.9,   1.9,   0.0,  -1.9};

constexpr std::array<float, 64> knight_map_w = {
           -1.9,   0.0,   1.9,   1.9,   1.9,   1.9,   0.0,  -1.9, 
            0.0,   3.8,   7.6,   9.5,   9.5,   7.6,   3.8,   0.0, 
            1.9,   9.5,  11.4,  13.3,  13.3,  11.4,   9.5,   1.9, 
            1.9,   7.6,  13.3,  15.2,  15.2,  13.3,   7.6,   1.9, 
            1.9,   9.5,  13.3,  15.2,  15.2,  13.3,   9.5,   1.9, 
            1.9,   7.6,  11.4,  13.3,  13.3,  11.4,   7.6,   1.9, 
            0.0,   3.8,   7.6,   7.6,   7.6,   7.6,   3.8,   0.0, 
           -1.9,   0.0,   1.9,   1.9,   1.9,   1.9,   0.0,  -1.9};

constexpr std::array<float, 64> bishop_map_b = {
            4.0,   5.0,   5.0,   5.0,   5.0,   5.0,   5.0,   4.0,
            5.0,   6.0,   6.0,   6.0,   6.0,   6.0,   6.0,   5.0,
            5.0,   6.0,   7.0,   8.0,   8.0,   7.0,   6.0,   5.0,
            5.0,   7.0,   7.0,   8.0,   8.0,   7.0,   7.0,   5.0,
            5.0,   6.0,   8.0,   8.0,   8.0,   8.0,   6.0,   5.0,
            5.0,   8.0,   8.0,   8.0,   8.0,   8.0,   8.0,   5.0,
            5.0,   7.0,   6.0,   6.0,   6.0,   6.0,   7.0,   5.0,
            4.0,   5.0,   5.0,   5.0,   5.0,   5.0,   5.0,   4.0};

constexpr std::array<float, 64> bishop_map_w = {
            4.0,   5.0,   5.0,   5.0,   5.0,  5.0,   5.0,   4.0,
            5.0,   7.0,   6.0,   6.0,   6.0,  6.0,   7.0,   5.0,
            5.0,   8.0,   8.0,   8.0,   8.0,  8.0,   8.0,   5.0,
            5.0,   6.0,   8.0,   8.0,   8.0,  8.0,   6.0,   5.0,
            5.0,   7.0,   7.0,   8.0,   8.0,  7.0,   7.0,   5.0,
            5.0,   6.0,   7.0,   8.0,   8.0,  7.0,   6.0,   5.0,
            5.0,   6.0,   6.0,   6.0,   6.0,  6.0,   6.0,   5.0,
            4.0,   5.0,   5.0,   5.0,   5.0,  5.0,   5.0,   4.0};

constexpr std::array<float, 64> rook_map_b = {
            2.4,   2.4,   2.4,   2.4,   2.4,   2.4,   2.4,   2.4, 
            4.4,   4.8,   4.8,   4.8,   4.8,   4.8,   4.8,   4.4, 
            1.6,   2.4,   2.4,   2.4,   2.4,   2.4,   2.4,   1.6, 
            1.6,   2.4,   2.4,   2.4,   2.4,   2.4,   2.4,   1.6, 
            1.6,   2.4,   2.4,   2.4,   2.4,   2.4,   2.4,   1.6, 
            1.6,   2.4,   2.4,   2.4,   2.4,   2.4,   2.4,   1.6, 
            1.6,   2.4,   2.4,   2.4,   2.4,   2.4,   2.4,   1.6, 
            2.4,   2.4,   2.4,   3.2,   3.2,   2.4,   2.4,   2.4};

constexpr std::array<float, 64> rook_map_w = {
            2.4,   2.4,   2.4,   3.2,   3.2,   2.4,   2.4,   2.4, 
            1.6,   2.4,   2.4,   2.4,   2.4,   2.4,   2.4,   1.6, 
            1.6,   2.4,   2.4,   2.4,   2.4,   2.4,   2.4,   1.6, 
            1.6,   2.4,   2.4,   2.4,   2.4,   2.4,   2.4,   1.6, 
            1.6,   2.4,   2.4,   2.4,   2.4,   2.4,   2.4,   1.6, 
            1.6,   2.4,   2.4,   2.4,   2.4,   2.4,   2.4,   1.6, 
            4.4,   4.8,   4.8,   4.8,   4.8,   4.8,   4.8,   4.4, 
            2.4,   2.4,   2.4,   2.4,   2.4,   2.4,   2.4,   2.4};

constexpr std::array<float, 64> queen_map_b = {
            1.6,   2.4,   2.4,   3.2,   3.2,   2.4,   2.4,   1.6, 
            2.4,   4.0,   4.0,   4.0,   4.0,   4.0,   4.0,   2.4, 
            2.4,   4.0,   5.6,   5.6,   5.6,   5.6,   4.0,   2.4, 
            3.2,   4.0,   5.6,   5.6,   5.6,   5.6,   4.0,   3.2, 
            4.0,   4.0,   5.6,   5.6,   5.6,   5.6,   4.0,   3.2, 
            2.4,   5.6,   5.6,   5.6,   5.6,   5.6,   4.0,   2.4, 
            2.4,   4.0,   5.6,   4.0,   4.0,   4.0,   4.0,   2.4, 
            1.6,   2.4,   2.4,   3.2,   3.2,   2.4,   2.4,   1.6};

constexpr std::array<float, 64> queen_map_w = {
            1.6,   2.4,   2.4,   3.2,   3.2,   2.4,   2.4,   1.6, 
            2.4,   4.0,   5.6,   4.0,   4.0,   4.0,   4.0,   2.4, 
            2.4,   5.6,   5.6,   5.6,   5.6,   5.6,   4.0,   2.4, 
            4.0,   4.0,   5.6,   5.6,   5.6,   5.6,   4.0,   3.2, 
            3.2,   4.0,   5.6,   5.6,   5.6,   5.6,   4.0,   3.2, 
            2.4,   4.0,   5.6,   5.6,   5.6,   5.6,   4.0,   2.4, 
            2.4,   4.0,   4.0,   4.0,   4.0,   4.0,   4.0,   2.4, 
            1.6,   2.4,   2.4,   3.2,   3.2,   2.4,   2.4,   1.6};


constexpr std::array<float, 64> king_map_mg_b = { // middle game
           -0.1,  -0.2,  -0.2,  -0.2,  -0.2,  -0.2,  -0.2,  -0.1, 
           -0.1,  -0.2,  -0.2,  -0.2,  -0.2,  -0.2,  -0.2,  -0.1, 
           -0.1,  -0.2,  -0.2,  -0.2,  -0.2,  -0.2,  -0.2,  -0.1, 
           -0.1,  -0.2,  -0.2,  -0.2,  -0.2,  -0.2,  -0.2,  -0.1, 
           -0.1,  -0.1,  -0.1,  -0.2,  -0.2,  -0.1,  -0.1,  -0.1, 
           -0.0,  -0.1,  -0.1,  -0.1,  -0.1,  -0.1,  -0.1,  -0.0, 
            0.2,   0.2,   0.0,   0.0,   0.0,   0.0,   0.2,   0.2, 
            0.2,   0.3,   0.2,   0.0,   0.0,   0.2,   0.3,   0.2};

constexpr std::array<float, 64> king_map_mg_w = { // middle game
            0.2,   0.3,   0.2,   0.0,   0.0,   0.2,   0.3,   0.2, 
            0.2,   0.2,   0.0,   0.0,   0.0,   0.0,   0.2,   0.2, 
           -0.0,  -0.1,  -0.1,  -0.1,  -0.1,  -0.1,  -0.1,  -0.0, 
           -0.1,  -0.1,  -0.1,  -0.2,  -0.2,  -0.1,  -0.1,  -0.1, 
           -0.1,  -0.2,  -0.2,  -0.2,  -0.2,  -0.2,  -0.2,  -0.1, 
           -0.1,  -0.2,  -0.2,  -0.2,  -0.2,  -0.2,  -0.2,  -0.1, 
           -0.1,  -0.2,  -0.2,  -0.2,  -0.2,  -0.2,  -0.2,  -0.1, 
           -0.1,  -0.2,  -0.2,  -0.2,  -0.2,  -0.2,  -0.2,  -0.1};

constexpr std::array<float, 64> king_map_eg_b = { // end game
           -1.3,  -1.0,  -0.7,  -0.3,  -0.3,  -0.7,  -1.0,  -1.3, 
           -0.7,  -0.3,   0.0,   0.3,   0.3,   0.0,  -0.3,  -0.7, 
           -0.7,   0.0,   1.0,   1.3,   1.3,   1.0,   0.0,  -0.7, 
           -0.7,   0.0,   1.3,   1.6,   1.6,   1.3,   0.0,  -0.7, 
           -0.7,   0.0,   1.3,   1.6,   1.6,   1.3,   0.0,  -0.7, 
           -0.7,   0.0,   1.0,   1.3,   1.3,   1.0,   0.0,  -0.7, 
           -0.7,  -0.7,   0.3,   0.3,   0.3,   0.3,  -0.7,  -0.7, 
           -1.3,  -0.7,  -0.7,  -0.7,  -0.7,  -0.7,  -0.7,  -1.3};

constexpr std::array<float, 64> king_map_eg_w = { // end game
           -1.3,  -0.7,  -0.7,  -0.7,  -0.7,  -0.7,  -0.7,  -1.3, 
           -0.7,  -0.7,   0.3,   0.3,   0.3,   0.3,  -0.7,  -0.7, 
           -0.7,   0.0,   1.0,   1.3,   1.3,   1.0,   0.0,  -0.7, 
           -0.7,   0.0,   1.3,   1.6,   1.6,   1.3,   0.0,  -0.7, 
           -0.7,   0.0,   1.3,   1.6,   1.6,   1.3,   0.0,  -0.7, 
           -0.7,   0.0,   1.0,   1.3,   1.3,   1.0,   0.0,  -0.7, 
           -0.7,  -0.3,   0.0,   0.3,   0.3,   0.0,  -0.3,  -0.7, 
           -1.3,  -1.0,  -0.7,  -0.3,  -0.3,  -0.7,  -1.0,  -1.3};

struct PieceSquareMaps {
    std::array<float, 640> all_psm;// 10 psm of 64 squares
    std::array<std::array<float, 64>, 10> psms = {
        pawn_map_w, knight_map_w, bishop_map_w, rook_map_w, queen_map_w,
        pawn_map_b, knight_map_b, bishop_map_b, rook_map_b, queen_map_b,
    };

    std::array<float, 4*64> all_ksm; // wking/bking, eg/not eg;


    constexpr PieceSquareMaps(){
        for (int i = 0; i < 10; i++){
            std::copy(psms[i].begin(), psms[i].end(), &all_psm[i*64]);
        }

        std::copy(king_map_mg_w.begin(), king_map_mg_w.end(), &all_ksm[0]);
        std::copy(king_map_eg_w.begin(), king_map_eg_w.end(), &all_ksm[64]);
        std::copy(king_map_mg_b.begin(), king_map_mg_b.end(), &all_ksm[128]);
        std::copy(king_map_eg_b.begin(), king_map_eg_b.end(), &all_ksm[192]);

    }

    constexpr int get_psm(chess::Piece piece, chess::Square from_sq, chess::Square to_sq) const {
        int piece_idx = static_cast<int>(piece);
        piece_idx = (piece_idx-(piece_idx > 5))*64;
        return all_psm[piece_idx + to_sq.index()] - all_psm[piece_idx + from_sq.index()];
    }

    constexpr float get_ksm(chess::Piece king, bool is_endgame, chess::Square from_sq, chess::Square to_sq) const {
        int piece_idx = 128*(king == chess::Piece::BLACKKING) + 64*is_endgame; 
        return all_ksm[piece_idx + to_sq.index()] - all_ksm[piece_idx + from_sq.index()];
    }
};