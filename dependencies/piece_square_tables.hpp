#pragma once

#include "chess.hpp"
#include <vector>

inline std::vector<int> black_scores = {
                11, 11, 11, 7, 7, 9, 9, 9,
                11, 11, 11, 7, 7, 9, 9, 9,
                10, 10, 10, 7, 7, 8, 8, 8,
                10, 10, 10, 6, 6, 8, 8, 8,
                2,  2,  2,  6, 6, 4, 4, 4,
                2,  2,  2,  5, 5, 4, 4, 4,
                1,  1,  1,  5, 5, 3, 3, 3,
                1,  1,  1,  5, 5, 3, 3, 3};

inline std::vector<int> white_scores = {
                 1,  1,  1, 5, 5, 3, 3, 3,
                 1,  1,  1, 5, 5, 3, 3, 3,
                 2,  2,  2, 5, 5, 4, 4, 4, 
                 2,  2,  2, 6, 6, 4, 4, 4,
                10, 10, 10, 6, 6, 8, 8, 8, 
                10, 10, 10, 7, 7, 8, 8, 8, 
                11, 11, 11, 7, 7, 9, 9, 9, 
                11, 11, 11, 7, 7, 9, 9, 9};

inline std::vector<int> pawn_map_b = {
              9,  9,  9,  9,  9,  9,  9,  9,
              7,  7,  7,  7,  7,  7,  7,  7,
              2,  2,  3,  5,  5,  3,  2,  2,
              1,  1,  2,  4,  4,  2,  1,  1,
              0,  0,  0,  3,  3,  0,  0,  0,
              1, -1, -2,  0,  0, -2, -1,  1,
              0,  0,  0,  0,  0,  0,  0,  0,
              0,  0,  0,  0,  0,  0,  0,  0};

inline std::vector<int> pawn_map_w = {
              0,  0,  0,  0,  0,  0,  0,  0,
              0,  0,  0,  0,  0,  0,  0,  0,
              1, -1, -2,  0,  0, -2, -1,  1,
              0,  0,  0,  3,  3,  0,  0,  0,
              1,  1,  2,  4,  4,  2,  1,  1,
              2,  2,  3,  5,  5,  3,  2,  2,
              7,  7,  7,  7,  7,  7,  7,  7,
              9,  9,  9,  9,  9,  9,  9,  9};

inline std::vector<int> knight_map_b = {
                -1,  0,  1,  1,  1,  1,  0, -1,
                 0,  2,  4,  4,  4,  4,  2,  0,
                 1,  4,  6,  7,  7,  6,  4,  1,
                 1,  5,  7,  8,  8,  7,  5,  1,
                 1,  4,  7,  8,  8,  7,  4,  1,
                 1,  5,  6,  7,  7,  6,  5,  1,
                 0,  2,  4,  5,  5,  4,  2,  0,
                -1,  0,  1,  1,  1,  1,  0, -1};

inline std::vector<int> knight_map_w = {
                -1,  0,  1,  1,  1,  1,  0, -1,
                 0,  2,  4,  5,  5,  4,  2,  0,
                 1,  5,  6,  7,  7,  6,  5,  1,
                 1,  4,  7,  8,  8,  7,  4,  1,
                 1,  5,  7,  8,  8,  7,  5,  1,
                 1,  4,  6,  7,  7,  6,  4,  1,
                 0,  2,  4,  4,  4,  4,  2,  0,
                -1,  0,  1,  1,  1,  1,  0, -1};

inline std::vector<int> bishop_map_b = {
                4, 5, 5, 5, 5, 5, 5, 4,
                5, 6, 6, 6, 6, 6, 6, 5,
                5, 6, 7, 8, 8, 7, 6, 5,
                5, 7, 7, 8, 8, 7, 7, 5,
                5, 6, 8, 8, 8, 8, 6, 5,
                5, 8, 8, 8, 8, 8, 8, 5,
                5, 7, 6, 6, 6, 6, 7, 5,
                4, 5, 5, 5, 5, 5, 5, 4};

inline std::vector<int> bishop_map_w = {
                4, 5, 5, 5, 5, 5, 5, 4,
                5, 7, 6, 6, 6, 6, 7, 5,
                5, 8, 8, 8, 8, 8, 8, 5,
                5, 6, 8, 8, 8, 8, 6, 5,
                5, 7, 7, 8, 8, 7, 7, 5,
                5, 6, 7, 8, 8, 7, 6, 5,
                5, 6, 6, 6, 6, 6, 6, 5,
                4, 5, 5, 5, 5, 5, 5, 4};

inline std::vector<int> rook_map_b = {
               6,  6,  6,  6,  6,  6,  6,  6,
              11, 12, 12, 12, 12, 12, 12, 11,
               4,  6,  6,  6,  6,  6,  6,  4,
               4,  6,  6,  6,  6,  6,  6,  4,
               4,  6,  6,  6,  6,  6,  6,  4,
               4,  6,  6,  6,  6,  6,  6,  4,
               4,  6,  6,  6,  6,  6,  6,  4,
               6,  6,  6,  8,  8,  6,  6,  6};

inline std::vector<int> rook_map_w = {
               6,  6,  6,  8,  8,  6,  6,  6,
               4,  6,  6,  6,  6,  6,  6,  4,
               4,  6,  6,  6,  6,  6,  6,  4,
               4,  6,  6,  6,  6,  6,  6,  4,
               4,  6,  6,  6,  6,  6,  6,  4,
               4,  6,  6,  6,  6,  6,  6,  4,
              11, 12, 12, 12, 12, 12, 12, 11,
               6,  6,  6,  6,  6,  6,  6,  6};

inline std::vector<int> queen_map_b = {
               2, 3, 3, 4, 4, 3, 3, 2,
               3, 5, 5, 5, 5, 5, 5, 3,
               3, 5, 7, 7, 7, 7, 5, 3,
               4, 5, 7, 7, 7, 7, 5, 4,
               5, 5, 7, 7, 7, 7, 5, 4,
               3, 7, 7, 7, 7, 7, 5, 3,
               3, 5, 7, 5, 5, 5, 5, 3,
               2, 3, 3, 4, 4, 3, 3, 2};

inline std::vector<int> queen_map_w = {
               2, 3, 3, 4, 4, 3, 3, 2,
               3, 5, 7, 5, 5, 5, 5, 3,
               3, 7, 7, 7, 7, 7, 5, 3,
               5, 5, 7, 7, 7, 7, 5, 4,
               4, 5, 7, 7, 7, 7, 5, 4,
               3, 5, 7, 7, 7, 7, 5, 3,
               3, 5, 5, 5, 5, 5, 5, 3,
               2, 3, 3, 4, 4, 3, 3, 2};


inline std::vector<float> king_map_mg_b = { // middle game
                -0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3,
                -0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3,
                -0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3,
                -0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3,
                -0.2, -0.3, -0.3, -0.4, -0.4, -0.3, -0.3, -0.2,
                -0.1, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.1,
                 0.5,  0.5,  0.0,  0.0,  0.0,  0.0,  0.5,  0.5,
                 0.6,  0.7,  0.5,  0.0,  0.0,  0.5,  0.7,  0.6};

inline std::vector<float> king_map_mg_w = { // middle game
                0.6,  0.7,  0.5,  0.0,  0.0,  0.5,  0.7,  0.6,  
                0.5,  0.5,  0.0,  0.0,  0.0,  0.0,  0.5,  0.5,
               -0.1, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.1,
               -0.2, -0.3, -0.3, -0.4, -0.4, -0.3, -0.3, -0.2,
               -0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3,
               -0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3,
               -0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3,
               -0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3};

inline std::vector<float> king_map_eg_b = { // end game
                   -0.4, -0.3, -0.2, -0.1, -0.1, -0.2, -0.3,   -0.4,
                   -0.2, -0.1,  0.0,  0.1,  0.1,  0.0, -0.1,   -0.2,
                   -0.2,  0.0,  0.3,  0.4,  0.4,  0.3,  0.0,   -0.2,
                   -0.2,  0.0,  0.4,  0.5,  0.5,  0.4,  0.0,   -0.2,
                   -0.2,  0.0,  0.4,  0.5,  0.5,  0.4,  0.0,   -0.2,
                   -0.2,  0.0,  0.3,  0.4,  0.4,  0.3,  0.0,   -0.2,
                   -0.2, -0.2,  0.1,  0.1,  0.1,  0.1, -0.2,   -0.2,
                   -0.4, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2,   -0.4};

inline std::vector<float> king_map_eg_w = { // end game
                 -0.4, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.4,
                 -0.2, -0.2,  0.1,  0.1,  0.1,  0.1, -0.2, -0.2,
                 -0.2,  0.0,  0.3,  0.4,  0.4,  0.3,  0.0, -0.2,
                 -0.2,  0.0,  0.4,  0.5,  0.5,  0.4,  0.0, -0.2,
                 -0.2,  0.0,  0.4,  0.5,  0.5,  0.4,  0.0, -0.2,
                 -0.2,  0.0,  0.3,  0.4,  0.4,  0.3,  0.0, -0.2,
                 -0.2, -0.1,  0.0,  0.1,  0.1,  0.0, -0.1, -0.2,
                 -0.4, -0.3, -0.2, -0.1, -0.1, -0.2, -0.3, -0.4};

struct PieceSquareMaps {
    std::vector<int> all_psm = std::vector<int>(640); // 10 psm of 64 squares
    std::vector<std::vector<int>> psms = {
        pawn_map_w, knight_map_w, bishop_map_w, rook_map_w, queen_map_w,
        pawn_map_b, knight_map_b, bishop_map_b, rook_map_b, queen_map_b,
    };

    std::vector<float> all_ksm = std::vector<float>(4*64); // wking/bking eg/not eg;


    PieceSquareMaps(){
        for (int i = 0; i < 10; i++){
            std::copy(psms[i].begin(), psms[i].end(), &all_psm[i*64]);
        }

        std::copy(king_map_mg_w.begin(), king_map_mg_w.end(), &all_ksm[0]);
        std::copy(king_map_eg_w.begin(), king_map_eg_w.end(), &all_ksm[64]);
        std::copy(king_map_mg_b.begin(), king_map_mg_b.end(), &all_ksm[128]);
        std::copy(king_map_eg_b.begin(), king_map_eg_b.end(), &all_ksm[192]);

    }

    int get_psm(chess::Piece piece, chess::Square from_sq, chess::Square to_sq){
        int piece_idx = static_cast<int>(piece);
        piece_idx = (piece_idx-(piece_idx > 5))*64;
        return all_psm[piece_idx + to_sq.index()] - all_psm[piece_idx + from_sq.index()];
    }

    float get_ksm(chess::Piece king, bool is_endgame, chess::Square from_sq, chess::Square to_sq){
        int piece_idx = 128*(king == chess::Piece::BLACKKING) + 64*is_endgame; 
        return all_ksm[piece_idx + to_sq.index()] - all_ksm[piece_idx + from_sq.index()];
    }
};